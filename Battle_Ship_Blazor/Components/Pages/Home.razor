@page "/"
@using ShipDLL
@using System.ComponentModel.Design
@using System.Net.Sockets
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Mvc.ModelBinding.Binders
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering]

<PageTitle>Home</PageTitle>

<div id="ModalContainer" class="@(game.GamePhase == EPhase.GameOver ? "visible" : "notVisible")">
    <div id="ModalBackground" >d</div>
</div>

<div class="container-fluid" id="main_Window">
    <h1>Battle Ships</h1>
    <div id="Player1Stats" class="Player_stats player1Field @(game.ActivePlayer == game.Players[0] ? "activePlayer1" : "")">   <!-- TODO Active class for active player -->
        <h2>Player 1</h2>
        @if(game.GamePhase == EPhase.PlacingShips && game.ActivePlayer == game.Players[0])
        {
            <div class="ShipsLayout">
                @foreach (var ship in game.Players[0].UnplacedShips)
                {
                    <div class="Placing_Ship">
                        <img @onclick="() => PlaceShip(ship.Type)" class="@(ship == ActiveShip ? "activeShip":"")" src="./Img/@(ship.Type).png"/>
                        <div>@ship.Type , @((int)@ship.Type)</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="Stats_Entry">
                <div class="Stats_Text">Left HP:</div>
                <div class="Stats_Stat"> @game.Players[0].Field.LeftHP</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Left Ships:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> @game.Players[0].Field.LeftShips</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Attacks:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetAttacks(game.Players[0])</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Misses:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetMisses(game.Players[0]) </div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hits:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetHits(game.Players[0])</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hit-Percent:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetHitPercent(game.Players[0])%</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Show Field</div>
                <label class="switch Stats_Stat">
                    <input @bind="ShowMyFieldPlayer1" type="checkbox">
                    <span class="slider round"></span>
                </label>
            </div> 
            <div class="Stats_Buttons">
                <button class="Stats_draw" @onclick="() => RequestDraw(game.Players[0])">
                    @if (DrawRequestedBy == null)
                    {
                        <span>Request Draw</span>
                    }
                    else if (DrawRequestedBy == game.Players[0])
                    {
                        <span>Draw Requested!</span>
                    }
                    else if(DrawRequestedBy == game.Players[1])
                    {
                        <span>Accept Draw</span>
                    }
                </button> <!-- TODO Backend -->
                <button class="Stats_surrender">Surrender</button>
            </div>
        }
        <div class="activePlayer"></div>
    </div>
    
    <div id="Player2Stats" class="Player_stats player2Field  @(game.ActivePlayer == game.Players[1] ? "activePlayer2" : "")">
    <h2>Player 2</h2>
        @if(game.GamePhase == EPhase.PlacingShips && game.ActivePlayer == game.Players[1])
        {
            <div class="ShipsLayout">
                @foreach (var ship in game.Players[1].UnplacedShips)
                {
                    <div class="Placing_Ship">
                        <img @onclick="() => PlaceShip(ship.Type)" class="@(ship == ActiveShip ? "activeShip":"")" src="./Img/@(ship.Type).png"/>
                        <div>@ship.Type , @((int)@ship.Type)</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="Stats_Entry">
                <div class="Stats_Text">Left HP:</div>
                <div class="Stats_Stat"> @game.Players[1].Field.LeftHP</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Left Ships:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> @game.Players[1].Field.LeftShips</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Attacks:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetAttacks(game.Players[1])</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Misses:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetMisses(game.Players[1]) </div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hits:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetHits(game.Players[1])</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hit-Percent:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">@GetHitPercent(game.Players[1])%</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Show Field</div>
                <label class="switch Stats_Stat">
                    <input @bind="ShowMyFieldPlayer2" type="checkbox">
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="Stats_Buttons">
               <button class="Stats_draw" @onclick="() => RequestDraw(game.Players[1])">
                   @if (DrawRequestedBy == null)
                   {
                       <span>Request Draw</span>
                   }
                   else if (DrawRequestedBy == game.Players[1])
                   {
                       <span>Draw Requested!</span>
                   }
                   else if(DrawRequestedBy == game.Players[0])
                   {
                       <span>Accept Draw</span>
                   }
                               </button> <!-- TODO Backend -->
                <button class="Stats_surrender">Surrender</button>
            </div>
        }
    </div>
    
     <div id="MainBoard">
            <div class="FieldEntry">
                 @if (game.ActivePlayer == game.Players[1] && ShowMyFieldPlayer2)
                 {
                     @for (int i = 0; i < 100; i++)
                     {
                         var tempint2 = i;
                         <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[1].Field.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 2)">
                         
                             @if (game.Players[1].Field.FieldArr[tempint2].ShipPart != null)
                             {
                                 var j = game.Players[1].Field.FieldArr[tempint2].ShipPart.NumberInSequence;
                                 <img class="PlacedShip Placed @((game.Players[1].Field.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[1].Field.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                             }
                         </div></a>
                     }
                 }
                 else
                 {
                     @for (int i = 0; i < 100; i++)
                     {
                         var tempint2 = i;
                         <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[0].EnemyField.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 2)">
                             @if (game.Players[0].EnemyField.FieldArr[tempint2].ShipPart != null)
                             {
                                 var j = game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.NumberInSequence;
                                 <img class="PlacedShip Placed @((game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                             }
                         </div></a>
                     }
                 }
                 
            </div>
             <div class="FieldEntry">
                 @if (game.ActivePlayer == game.Players[0] && ShowMyFieldPlayer1)
                 {
                     @for (int i = 0; i < 100; i++)
                     {
                         var tempint2 = i;
                         <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[0].Field.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 1)">
                         
                             @if (game.Players[0].Field.FieldArr[tempint2].ShipPart != null)
                             {
                                 var j = game.Players[0].Field.FieldArr[tempint2].ShipPart.NumberInSequence;
                                 <img class="PlacedShip Placed @((game.Players[0].Field.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[0].Field.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                             }
                         </div></a>
                     }
                 }
                 else
                 {
                     @for (int i = 0; i < 100; i++)
                     {
                         var tempint2 = i;
                         <a>
                             <div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[1].EnemyField.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 1)">
    
                                 @if (game.Players[1].EnemyField.FieldArr[tempint2].ShipPart != null)
                                 {
                                     var j = game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.NumberInSequence;
                                     <img class="PlacedShip Placed @((game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                                 }
                            </div></a>
                     }
                 }
            </div>
        </div>  
        
        <div id="controls">
            <div>Round: @game.Round</div>
            <div>Active Player: @game.ActivePlayer.ID</div>
            <div class="controls_buttons">
                <button class="Stats_draw" @onclick="StartGame">Start Placing</button>
                <button @onclick="game.ChangeTurns">Change Turn</button>
            </div>
        </div>
        
    </div>




@code {
    private Battleships game { get; set; } = new Battleships();
    public List<Point> SelectedPoints { get; set; }
    public IShip ActiveShip { get; set; }
    public IPlayer DrawRequestedBy { get; set; }

    public bool ShowMyFieldPlayer1
    {
        get => game.Players[0].ShowMyField;
        set => value = game.ShowMyField(game.Players[0]);
    }
    public bool ShowMyFieldPlayer2
    {
        get => game.Players[1].ShowMyField;
        set => value = game.ShowMyField(game.Players[1]);
    }
    
    protected override void OnInitialized()
    {
        game = new Battleships();
        game.CreateGame();
        SelectedPoints = new List<Point>();
        DrawRequestedBy = null;

        return;
    }
    
    public void StartGame()
    {
        game.StartPlacingShips();
    }

    public void PlaceShip(EShip shipType)
    {
        if (game.GamePhase != EPhase.PlacingShips)
            return;
        if (ActiveShip == null)
        {
            ActiveShip = game.ActivePlayer.UnplacedShips.Where(s => s.Type == shipType).FirstOrDefault();
            return;
        }

        if (ActiveShip.Type != shipType)
        {
            ActiveShip = game.ActivePlayer.UnplacedShips.Where(s => s.Type == shipType).FirstOrDefault();
            return;
        }
        ActiveShip = null;
        
    }
    

    public void FieldClicked(int field, int PlayerID)
    {
        if (game.GamePhase == EPhase.PlacingShips)
        {
            if(game.ActivePlayer.ID != PlayerID)
                return;
            var result = EnterPoint(field);
            Console.WriteLine("here");
            if (result == -1 || result == 0)
                return;
            bool placingResult = game.SetShip(ActiveShip, SelectedPoints[0], SelectedPoints[1]);
            SelectedPoints = new List<Point>();
            Console.WriteLine(placingResult);
        }
        else if (game.GamePhase == EPhase.Playing)
        {
            if (game.ActivePlayer.ID == PlayerID)
                return;
            var result = game.Attack(new Point(field % 10, (int)field / 10));
            Console.WriteLine(result);
        }
    }
    

    private int EnterPoint(int field)
    {
        if (game.GamePhase != EPhase.PlacingShips || ActiveShip == null)
            return -1;
        if (SelectedPoints == null)
            SelectedPoints = new List<Point>();
        if (SelectedPoints.Count == 2)
        {
            Console.WriteLine(SelectedPoints[0] + " " + SelectedPoints[1]);
            SelectedPoints = new List<Point>();
        }
        
        Point p = new Point(field % 10,(int)Math.Floor((double)field / 10));
        SelectedPoints.Add(p);

        if (SelectedPoints.Count == 2)
            return 1;
        
        return 0;
    }

    private string CheckIfClicked(int field)
    {
        if (SelectedPoints.Count == 0)
            return "";
        if (SelectedPoints[0].GetIndex() == field)
            return "clickedField";
        return "";
    }

    private int GetAttacks(IPlayer player) => player.EnemyField.FieldArr.ToList().Where(p => p.Status != EPositionStatus.Empty && p.Status != EPositionStatus.Ship).Count();

    private int GetMisses(IPlayer player) => player.EnemyField.FieldArr.ToList().Where(p => p.Status == EPositionStatus.Miss).Count();

    private int GetHits(IPlayer player) => player.EnemyField.FieldArr.ToList().Where(p => p.Status == EPositionStatus.Hit).Count();

    private double GetHitPercent(IPlayer player)
    {
        if (GetAttacks(player) == 0)
            return 0;
        return Math.Round((double)GetHits(player) / GetAttacks(player) * 100, 2);

    }

    private void RequestDraw(IPlayer player)
    {
        if (DrawRequestedBy == null)
        {
            DrawRequestedBy = player;
            return;
        }
        if (DrawRequestedBy == player)
            return;
        game.Draw();
        DrawRequestedBy = null;
    }
    
    public void Draw()
    {
        
    }
    
}