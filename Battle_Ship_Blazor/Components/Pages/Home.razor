@page "/"
@using ShipDLL
@using System.ComponentModel.Design
@using System.Net.Sockets
@using System.Runtime.CompilerServices
@using Microsoft.AspNetCore.Mvc.ModelBinding.Binders
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering]

<PageTitle>Home</PageTitle>

<div class="container-fluid" id="main_Window">
    <h1>Battle Ships</h1>
    <div id="Player1Stats" class="Player_stats">   <!-- TODO Active class for active player -->
        <h2>Player 1</h2>
        @if(game.GamePhase == EPhase.PlacingShips && game.ActivePlayer == game.Players[0])
        {
            <div class="ShipsLayout">
                @foreach (var ship in game.Players[0].UnplacedShips)
                {
                    <div class="Placing_Ship">
                        <img @onclick="() => PlaceShip(ship.Type)" class="@(ship == ActiveShip ? "activeShip":"")" src="./Img/@(ship.Type).png"/>
                        <div>@ship.Type , @((int)@ship.Type)</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="Stats_Entry">
                <div class="Stats_Text">Left HP:</div>
                <div class="Stats_Stat"> @game.Players[0].Field.LeftHP</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Left Ships:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> @game.Players[0].Field.LeftShips</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Attacks:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">xx</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Misses:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> xx</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hits:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> xx</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Buttons">
                 <button class="Stats_draw">Request a Draw</button> <!-- TODO Backend -->
                <button class="Stats_surrender">Surrender</button>
            </div>
        }
    </div>
    
    <div id="Player2Stats" class="Player_stats">
    <h2>Player 2</h2>
        @if(game.GamePhase == EPhase.PlacingShips && game.ActivePlayer == game.Players[1])
        {
            <div class="ShipsLayout">
                @foreach (var ship in game.Players[1].UnplacedShips)
                {
                    <div class="Placing_Ship">
                        <img @onclick="() => PlaceShip(ship.Type)" class="@(ship == ActiveShip ? "activeShip":"")" src="./Img/@(ship.Type).png"/>
                        <div>@ship.Type , @((int)@ship.Type)</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="Stats_Entry">
                <div class="Stats_Text">Left HP:</div>
                <div class="Stats_Stat"> @game.Players[1].Field.LeftHP</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Left Ships:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> @game.Players[1].Field.LeftShips</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Attacks:</div> <!-- TODO Backend -->
                <div class="Stats_Stat">xx </div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Misses:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> xx</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Entry">
                <div class="Stats_Text">Hits:</div> <!-- TODO Backend -->
                <div class="Stats_Stat"> xx</div> <!-- TODO Backend -->
            </div>
            <div class="Stats_Buttons">
                <button class="Stats_draw">Request a Draw</button> <!-- TODO Backend -->
                <button class="Stats_surrender">Surrender</button>
            </div>
        }
    </div>
    
    <div id="MainBoard">
        <div class="FieldEntry">
             @if (game.ActivePlayer == game.Players[1])
             {
                 @for (int i = 0; i < 100; i++)
                 {
                     var tempint2 = i;
                     <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[1].Field.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 2)">
                     
                         @if (game.Players[1].Field.FieldArr[tempint2].ShipPart != null)
                         {
                             var j = game.Players[1].Field.FieldArr[tempint2].ShipPart.NumberInSequence;
                             <img class="PlacedShip Placed @((game.Players[1].Field.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[1].Field.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                         }
                     </div></a>
                 }
             }
             else
             {
                 @for (int i = 0; i < 100; i++)
                 {
                     var tempint2 = i;
                     <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[0].EnemyField.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 2)">
                         @if (game.Players[0].EnemyField.FieldArr[tempint2].ShipPart != null)
                         {
                             var j = game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.NumberInSequence;
                             <img class="PlacedShip Placed @((game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[0].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                         }
                     </div></a>
                 }
             }
             
        </div>
         <div class="FieldEntry">
             @if (game.ActivePlayer == game.Players[0])
             {
                 @for (int i = 0; i < 100; i++)
                 {
                     var tempint2 = i;
                     <a><div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[0].Field.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 1)">
                     
                         @if (game.Players[0].Field.FieldArr[tempint2].ShipPart != null)
                         {
                             var j = game.Players[0].Field.FieldArr[tempint2].ShipPart.NumberInSequence;
                             <img class="PlacedShip Placed @((game.Players[0].Field.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[0].Field.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                         }
                     </div></a>
                 }
             }
             else
             {
                 @for (int i = 0; i < 100; i++)
                 {
                     var tempint2 = i;
                     <a>
                         <div class="FieldPoint @CheckIfClicked(tempint2) background@(game.Players[1].EnemyField.FieldArr[tempint2].Status)" @onclick="() => FieldClicked(tempint2, 1)">

                             @if (game.Players[1].EnemyField.FieldArr[tempint2].ShipPart != null)
                             {
                                 var j = game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.NumberInSequence;
                                 <img class="PlacedShip Placed @((game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type) + "" + j)" src="Img/@(game.Players[1].EnemyField.FieldArr[tempint2].ShipPart.Parent.Type).png"/>
                             }
                        </div></a>
                 }
             }
        </div>
    </div>  
    
    <div id="controls">
        <div>Round: @game.Round</div>
        <div>Active Player: @game.ActivePlayer.ID</div>
        <div class="controls_buttons">
            <button class="Stats_draw" @onclick="StartGame">Start Placing</button>
            <button @onclick="game.ChangeTurns">Change Turn</button>
        </div>
    </div>
    
</div>


@code {
    private Battleships game { get; set; } = new Battleships();
    public List<Point> SelectedPoints { get; set; }
    public IShip ActiveShip { get; set; }
    
    protected override void OnInitialized()
    {
        game = new Battleships();
        game.CreateGame();
        SelectedPoints = new List<Point>();


        return;
    }
    
    public void StartGame()
    {
        game.StartPlacingShips();
    }

    public void PlaceShip(EShip shipType)
    {
        if (game.GamePhase != EPhase.PlacingShips)
            return;
        if (ActiveShip == null)
        {
            ActiveShip = game.ActivePlayer.UnplacedShips.Where(s => s.Type == shipType).FirstOrDefault();
            return;
        }

        if (ActiveShip.Type != shipType)
        {
            ActiveShip = game.ActivePlayer.UnplacedShips.Where(s => s.Type == shipType).FirstOrDefault();
            return;
        }
        ActiveShip = null;
        
    }
    

    public void FieldClicked(int field, int PlayerID)
    {
        if (game.GamePhase == EPhase.PlacingShips)
        {
            if(game.ActivePlayer.ID != PlayerID)
                return;
            var result = EnterPoint(field);
            Console.WriteLine("here");
            if (result == -1 || result == 0)
                return;
            bool placingResult = game.SetShip(ActiveShip, SelectedPoints[0], SelectedPoints[1]);
            SelectedPoints = new List<Point>();
            Console.WriteLine(placingResult);
        }
        else if (game.GamePhase == EPhase.Playing)
        {
            if (game.ActivePlayer.ID == PlayerID)
                return;
            var result = game.Attack(new Point(field % 10, (int)field / 10));
            Console.WriteLine(result);
        }
        

        
        
    }
    

    private int EnterPoint(int field)
    {
        if (game.GamePhase != EPhase.PlacingShips || ActiveShip == null)
            return -1;
        if (SelectedPoints == null)
            SelectedPoints = new List<Point>();
        if (SelectedPoints.Count == 2)
        {
            Console.WriteLine(SelectedPoints[0] + " " + SelectedPoints[1]);
            SelectedPoints = new List<Point>();
        }
        
        Point p = new Point(field % 10,(int)Math.Floor((double)field / 10));
        SelectedPoints.Add(p);

        if (SelectedPoints.Count == 2)
            return 1;
        
        return 0;
    }

    private string CheckIfClicked(int field)
    {
        if (SelectedPoints.Count == 0)
            return "";
        if (SelectedPoints[0].GetIndex() == field)
            return "clickedField";
        return "";
    }
    
}